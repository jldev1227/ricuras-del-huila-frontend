generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model categorias {
  id          String      @id @db.Uuid
  nombre      String
  descripcion String?
  icono       String?
  orden       Int         @default(0)
  activo      Boolean     @default(true)
  creado_en   DateTime    @default(now())
  productos   productos[]
}

model clientes {
  id                     String                @id @db.Uuid
  nombre                 String
  apellido               String?
  telefono               String?
  correo                 String?
  tipo_identificacion    tipos_identificacion?
  numero_identificacion  String?
  digito_verificacion    String?
  tipo_persona           tipos_persona?
  regimen_fiscal         regimenes_fiscales?
  responsabilidad_fiscal String?
  direccion              String?
  ciudad                 String?
  departamento           String?
  codigo_postal          String?
  notas_especiales       String?
  frecuente              Boolean               @default(false)
  creado_en              DateTime              @default(now())
  actualizado_en         DateTime
  ordenes                ordenes[]
}

model mesas {
  id              String     @id @db.Uuid
  numero          Int
  disponible      Boolean    @default(true)
  sucursal_id     String     @db.Uuid
  ubicacion       String?
  notas           String?
  ultima_limpieza DateTime?
  creado_en       DateTime   @default(now())
  actualizado_en  DateTime
  sucursales      sucursales @relation(fields: [sucursal_id], references: [id], onDelete: SetNull, onUpdate: NoAction)
  ordenes         ordenes[]
}

model orden_items {
  id              String    @id @db.Uuid
  orden_id        String    @db.Uuid
  producto_id     String    @db.Uuid
  cantidad        Int
  precio_unitario Decimal   @db.Decimal(10, 2)
  subtotal        Decimal   @db.Decimal(10, 2)
  notas           String?
  ordenes         ordenes   @relation(fields: [orden_id], references: [id], onDelete: SetNull, onUpdate: NoAction)
  productos       productos @relation(fields: [producto_id], references: [id], onDelete: SetNull, onUpdate: NoAction)
}

model ordenes {
  id                   String        @id @db.Uuid
  mesero_id            String?       @db.Uuid
  total                Decimal       @db.Decimal(10, 2)
  estado               estados_orden @default(PENDIENTE)
  sincronizado         Boolean       @default(false)
  creado_offline       Boolean       @default(false)
  sincronizado_en      DateTime?
  creado_en            DateTime      @default(now())
  actualizado_en       DateTime
  mesa_id              String?       @db.Uuid
  cliente_id           String?       @db.Uuid
  costo_adicional      Decimal?      @db.Decimal(10, 2)
  costo_envio          Decimal?      @db.Decimal(10, 2)
  descuento            Decimal       @default(0) @db.Decimal(10, 2)
  direccion_entrega    String?
  hora_recogida        DateTime?
  indicaciones_entrega String?
  nombre_cliente       String?
  notas                String?
  subtotal             Decimal       @db.Decimal(10, 2)
  telefono_cliente     String?
  tipo_orden           tipos_orden
  especificaciones     String?
  metodo_pago          metodos_pago? @default(EFECTIVO)
  sucursal_id          String        @db.Uuid
  creado_por           String?       @db.Uuid
  actualizado_por      String?       @db.Uuid
  orden_items          orden_items[]
  clientes             clientes?     @relation(fields: [cliente_id], references: [id], onUpdate: NoAction)
  mesas                mesas?        @relation(fields: [mesa_id], references: [id], onUpdate: NoAction)
  usuarios             usuarios?     @relation(fields: [mesero_id], references: [id], onUpdate: NoAction)
  sucursales           sucursales    @relation(fields: [sucursal_id], references: [id], onDelete: SetNull, onUpdate: NoAction)
  creador              usuarios?     @relation("OrdenCreador", fields: [creado_por], references: [id], onUpdate: NoAction)
  actualizador         usuarios?     @relation("OrdenActualizador", fields: [actualizado_por], references: [id], onUpdate: NoAction)
}

model password_resets {
  id         String   @id @db.Uuid
  usuario_id String   @db.Uuid
  otp        String
  intentos   Int      @default(0)
  usado      Boolean  @default(false)
  expira_en  DateTime
  creado_en  DateTime @default(now())
  usuarios   usuarios @relation(fields: [usuario_id], references: [id], onDelete: SetNull, onUpdate: NoAction)
}

model productos {
  id               String        @id @db.Uuid
  nombre           String
  descripcion      String?
  precio           Decimal       @db.Decimal(10, 2)
  costo_produccion Decimal       @db.Decimal(10, 2)
  categoria_id     String        @db.Uuid
  imagen           String?
  disponible       Boolean       @default(true)
  destacado        Boolean       @default(false)
  creado_en        DateTime      @default(now())
  actualizado_en   DateTime      @default(now())
  orden_items      orden_items[]
  categorias       categorias    @relation(fields: [categoria_id], references: [id], onDelete: SetNull, onUpdate: NoAction)
}

model sesiones {
  id             String   @id @db.Uuid
  usuario_id     String   @db.Uuid
  token          String
  refresh_token  String?
  expira_en      DateTime
  dispositivo_id String?
  ip_address     String?
  user_agent     String?
  activa         Boolean  @default(true)
  ultimo_uso     DateTime @default(now())
  creado_en      DateTime @default(now())
  usuarios       usuarios @relation(fields: [usuario_id], references: [id], onDelete: SetNull, onUpdate: NoAction)
}

model sucursales {
  id        String    @id @db.Uuid
  nombre    String
  direccion String
  telefono  String?
  creado_en DateTime  @default(now())
  mesas     mesas[]
  ordenes   ordenes[]
}

model usuarios {
  id                    String                  @id @db.Uuid
  nombre_completo       String
  identificacion        String                  @unique
  correo                String?
  telefono              String?
  password              String
  rol                   roles                   @default(MESERO)
  activo                Boolean                 @default(true)
  ultima_conexion       DateTime?
  dispositivo_id        String?
  version_cache         Int                     @default(1)
  creado_en             DateTime                @default(now())
  actualizado_en        DateTime
  configuracion_empresa configuracion_empresa[]
  ordenes               ordenes[]
  ordenes_creadas       ordenes[]           @relation("OrdenCreador")
  ordenes_actualizadas  ordenes[]           @relation("OrdenActualizador")
  password_resets       password_resets[]
  sesiones              sesiones[]
}

model configuracion_empresa {
  id                 String              @id @default(uuid()) @db.Uuid
  nit                String              @unique
  razon_social       String
  nombre_comercial   String?
  telefono           String?
  correo             String?
  direccion          String?
  ciudad             String?
  departamento       String?
  codigo_postal      String?
  regimen_fiscal     regimenes_fiscales?
  tipo_persona       tipos_persona       @default(JURIDICA)
  numero_resolucion  String?
  fecha_resolucion   DateTime?
  numeracion_desde   String?
  numeracion_hasta   String?
  prefijo_factura    String?
  consecutivo_actual Int                 @default(1)
  logo_url           String?
  sitio_web          String?
  activo             Boolean             @default(true)
  creado_en          DateTime            @default(now())
  actualizado_en     DateTime            @updatedAt
  creado_por         String?             @db.Uuid
  usuarios           usuarios?           @relation(fields: [creado_por], references: [id])
}

enum estados_orden {
  PENDIENTE
  EN_PREPARACION
  LISTA
  ENTREGADA
  CANCELADA
}

enum regimenes_fiscales {
  SIMPLIFICADO
  COMUN
  GRAN_CONTRIBUYENTE
  NO_RESPONSABLE
}

enum roles {
  ADMINISTRADOR
  MESERO
}

enum tipos_identificacion {
  CC
  CE
  NIT
  TI
  PASAPORTE
  DIE
}

enum tipos_orden {
  LOCAL
  LLEVAR
  DOMICILIO
}

enum tipos_persona {
  NATURAL
  JURIDICA
}

enum metodos_pago {
  EFECTIVO
  TARJETA
  TRANSFERENCIA
}
